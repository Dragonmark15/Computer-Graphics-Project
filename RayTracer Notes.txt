Camera : Perspective
Camera : Orthonormal
	Difference = ray generation method
	Pass in an orthonormal basis
	Computer your own U(right-of-camera), V(above-camera), and W(behind-camera)
Shape [virtual interface]
	intersect()
Sphere
	Vector3D Center
	float radius
	bool intersect(Ray)
	void intersect(Ray, tMin, &tMax, &hitStructure)

Camera (nx, ny = pixel length, width) (check the XML  parser file)
Perspective
(later)Orthographic
(later)Light
Model/Shape (Create an array of shapes for the camera to use)
Scene (interface connecting everything)
Sphere
Triangle

Camera is passed in the screen data to determine vector direction
Camera calls a double for-loop to pass in each object per pixel
Each pixel calls the intersect on each object in the scene



W = -(focalLength) * viewDirection
W.normalize
t = Vector3D(0,1,0) //For now, this is ok. Not always ok
U = t.cross(W)
U.normalize
V = W.cross(U)
V.normalize

l = b = -iPW / 2
t = r = iPW / 2

float u = l + (r-l) (xPixel+0.5)/imagePixelWidth
float v = b + (t-b) (yPixel+0.5)/imagePixelHeight

Origin = XML camera origin
Direction = ([-(focalLength) * W] + [u * U] + [v * V])


class PointLightSource:Light
	For all pixels(i,j)
	Ray R=cam->genRay(i,j)
	if(hit)
	.
	.
	.

struct HitStructure {
	
}

class Shader
	virtual apply(&HitStructure)

Class Lambertian:shader
	apply(&HitStructure) //Must be a cos (angle)
	//Diffuse and Ambient = Material properties
	//Diffuse = reflected color
	light = (point - lightSource).normalize()
	color = normal.dot(light) * kd //kd = coefficient of diffused color
	max(n.dot(l) or 0) // Prevent shading underneath the object
Class NormalShader:Shader
